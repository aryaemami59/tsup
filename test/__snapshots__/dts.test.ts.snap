// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`declaration files with multiple entrypoints #316 1`] = `
"declare const foo = 1;

export { foo };
"
`;

exports[`declaration files with multiple entrypoints #316 2`] = `
"declare const bar = "bar";

export { bar };
"
`;

exports[`enable --dts-resolve for specific module 1`] = `
"export * from 'vue';

type MarkRequired<T, RK extends keyof T> = Exclude<T, RK> & Required<Pick<T, RK>>

export type { MarkRequired };
"
`;

exports[`not bundle \`package/subpath\` in dts (resolve) 1`] = `
"import * as foo_bar from 'foo/bar';

declare const stuff: foo_bar.Foobar;

export { stuff };
"
`;

exports[`should emit declaration files with experimentalDts 1`] = `
"
//////////////////////////////////////////////////////////////////////
// dist/index.d.mts
//////////////////////////////////////////////////////////////////////

export declare interface ClientRenderOptions {
    document: boolean;
}

export declare function render(options: ClientRenderOptions): string;

export declare function sharedFunction<T>(value: T): T | null;

export declare type sharedType = {
    shared: boolean;
};

export declare const VERSION: "0.0.0";

export { }


//////////////////////////////////////////////////////////////////////
// dist/index.d.ts
//////////////////////////////////////////////////////////////////////

export declare interface ClientRenderOptions {
    document: boolean;
}

export declare function render(options: ClientRenderOptions): string;

export declare function sharedFunction<T>(value: T): T | null;

export declare type sharedType = {
    shared: boolean;
};

export declare const VERSION: "0.0.0";

export { }


//////////////////////////////////////////////////////////////////////
// dist/my-lib-client.d.mts
//////////////////////////////////////////////////////////////////////

export declare interface ClientRenderOptions {
    document: boolean;
}

export declare function render(options: ClientRenderOptions): string;

export declare function sharedFunction<T>(value: T): T | null;

export declare type sharedType = {
    shared: boolean;
};

export { }


//////////////////////////////////////////////////////////////////////
// dist/my-lib-client.d.ts
//////////////////////////////////////////////////////////////////////

export declare interface ClientRenderOptions {
    document: boolean;
}

export declare function render(options: ClientRenderOptions): string;

export declare function sharedFunction<T>(value: T): T | null;

export declare type sharedType = {
    shared: boolean;
};

export { }


//////////////////////////////////////////////////////////////////////
// dist/server/index.d.mts
//////////////////////////////////////////////////////////////////////

import * as ServerThirdPartyNamespace from 'react-dom';

/**
 * Comment for server render function
 */
export declare function render(options: ServerRenderOptions): string;

export declare class ServerClass {
}

declare const serverConstant = 1;
export { serverConstant }
export { serverConstant as serverConstantAlias }

declare function serverDefaultExport(options: ServerRenderOptions): void;
export default serverDefaultExport;

export declare interface ServerRenderOptions {
    /**
     * Comment for ServerRenderOptions.stream
     *
     * @public
     *
     * @my_custom_tag
     */
    stream: boolean;
}

export { ServerThirdPartyNamespace }

export declare function sharedFunction<T>(value: T): T | null;

export declare type sharedType = {
    shared: boolean;
};


export * from "react-dom/server";

export { }


//////////////////////////////////////////////////////////////////////
// dist/server/index.d.ts
//////////////////////////////////////////////////////////////////////

import * as ServerThirdPartyNamespace from 'react-dom';

/**
 * Comment for server render function
 */
export declare function render(options: ServerRenderOptions): string;

export declare class ServerClass {
}

declare const serverConstant = 1;
export { serverConstant }
export { serverConstant as serverConstantAlias }

declare function serverDefaultExport(options: ServerRenderOptions): void;
export default serverDefaultExport;

export declare interface ServerRenderOptions {
    /**
     * Comment for ServerRenderOptions.stream
     *
     * @public
     *
     * @my_custom_tag
     */
    stream: boolean;
}

export { ServerThirdPartyNamespace }

export declare function sharedFunction<T>(value: T): T | null;

export declare type sharedType = {
    shared: boolean;
};


export * from "react-dom/server";

export { }
"
`;
